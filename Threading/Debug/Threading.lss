
Threading.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000056  00802000  00000cb6  00000d4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000007d  00802056  00802056  00000da0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000da0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000e10  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000633a  00000000  00000000  00000f98  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004041  00000000  00000000  000072d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001406  00000000  00000000  0000b313  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003a4  00000000  00000000  0000c71c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000348f  00000000  00000000  0000cac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006ec  00000000  00000000  0000ff4f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  0001063b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 02 01 	jmp	0x204	; 0x204 <__ctors_end>
   4:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
   8:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
   c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  10:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  14:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  18:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  1c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  20:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  24:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  28:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  2c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  30:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  34:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  38:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  3c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  40:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  44:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  48:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  4c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  50:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  54:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  58:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  5c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  60:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  64:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  68:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  6c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  70:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  74:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  78:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  7c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  80:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  84:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  88:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  8c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  90:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  94:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  98:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  9c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  a0:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  a4:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  a8:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  ac:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  b0:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  b4:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  b8:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  bc:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  c0:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  c4:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  c8:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  cc:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  d0:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  d4:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  d8:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  dc:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  e0:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  e4:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  e8:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  ec:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  f0:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  f4:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  f8:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
  fc:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 100:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 104:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 108:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 10c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 110:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 114:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 118:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 11c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 120:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 124:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 128:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 12c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 130:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 134:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 138:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 13c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 140:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 144:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 148:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 14c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 150:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 154:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 158:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 15c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 160:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <__vector_88>
 164:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 168:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 16c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 170:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 174:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 178:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 17c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 180:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 184:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 188:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 18c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 190:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 194:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 198:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 19c:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 1a0:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 1a4:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 1a8:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 1ac:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 1b0:	0c 94 6c 05 	jmp	0xad8	; 0xad8 <__vector_108>
 1b4:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 1b8:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 1bc:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 1c0:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 1c4:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 1c8:	0c 94 ef 05 	jmp	0xbde	; 0xbde <__vector_114>
 1cc:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 1d0:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 1d4:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 1d8:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 1dc:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 1e0:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 1e4:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 1e8:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 1ec:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 1f0:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 1f4:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>
 1f8:	0c 94 28 01 	jmp	0x250	; 0x250 <__bad_interrupt>

000001fc <__trampolines_start>:
 1fc:	0c 94 44 03 	jmp	0x688	; 0x688 <Main_LED>
 200:	0c 94 2f 04 	jmp	0x85e	; 0x85e <Main_UI>

00000204 <__ctors_end>:
 204:	11 24       	eor	r1, r1
 206:	1f be       	out	0x3f, r1	; 63
 208:	cf ef       	ldi	r28, 0xFF	; 255
 20a:	cd bf       	out	0x3d, r28	; 61
 20c:	df e3       	ldi	r29, 0x3F	; 63
 20e:	de bf       	out	0x3e, r29	; 62
 210:	00 e0       	ldi	r16, 0x00	; 0
 212:	0c bf       	out	0x3c, r16	; 60
 214:	18 be       	out	0x38, r1	; 56
 216:	19 be       	out	0x39, r1	; 57
 218:	1a be       	out	0x3a, r1	; 58
 21a:	1b be       	out	0x3b, r1	; 59

0000021c <__do_copy_data>:
 21c:	10 e2       	ldi	r17, 0x20	; 32
 21e:	a0 e0       	ldi	r26, 0x00	; 0
 220:	b0 e2       	ldi	r27, 0x20	; 32
 222:	e6 eb       	ldi	r30, 0xB6	; 182
 224:	fc e0       	ldi	r31, 0x0C	; 12
 226:	00 e0       	ldi	r16, 0x00	; 0
 228:	0b bf       	out	0x3b, r16	; 59
 22a:	02 c0       	rjmp	.+4      	; 0x230 <__do_copy_data+0x14>
 22c:	07 90       	elpm	r0, Z+
 22e:	0d 92       	st	X+, r0
 230:	a6 35       	cpi	r26, 0x56	; 86
 232:	b1 07       	cpc	r27, r17
 234:	d9 f7       	brne	.-10     	; 0x22c <__do_copy_data+0x10>
 236:	1b be       	out	0x3b, r1	; 59

00000238 <__do_clear_bss>:
 238:	20 e2       	ldi	r18, 0x20	; 32
 23a:	a6 e5       	ldi	r26, 0x56	; 86
 23c:	b0 e2       	ldi	r27, 0x20	; 32
 23e:	01 c0       	rjmp	.+2      	; 0x242 <.do_clear_bss_start>

00000240 <.do_clear_bss_loop>:
 240:	1d 92       	st	X+, r1

00000242 <.do_clear_bss_start>:
 242:	a3 3d       	cpi	r26, 0xD3	; 211
 244:	b2 07       	cpc	r27, r18
 246:	e1 f7       	brne	.-8      	; 0x240 <.do_clear_bss_loop>
 248:	0e 94 54 03 	call	0x6a8	; 0x6a8 <main>
 24c:	0c 94 59 06 	jmp	0xcb2	; 0xcb2 <_exit>

00000250 <__bad_interrupt>:
 250:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000254 <Clock_init>:
#include <avr/io.h>

.global Clock_init
Clock_init:
	
	push r16							;Save the register
 254:	0f 93       	push	r16

	ldi r16, OSC_RC32MEN_bm				;Here we are enabling the 32MHz oscillator
 256:	02 e0       	ldi	r16, 0x02	; 2
	sts OSC_CTRL, r16					;
 258:	00 93 50 00 	sts	0x0050, r16	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>

0000025c <OSC_Ready>:

OSC_Ready:
	lds r16, OSC_STATUS					;Load the oscillator status register
 25c:	00 91 51 00 	lds	r16, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>

	sbrs r16, OSC_RC32MRDY_bp			;Poll the 32MHz ready bit
 260:	01 ff       	sbrs	r16, 1
	rjmp OSC_Ready						;Until the 32MHz oscillator is ready
 262:	fc cf       	rjmp	.-8      	; 0x25c <OSC_Ready>

	ldi r16, 0xD8						;Now we must send the CPU_CPP register a 0xD8 signature to access protect IO registers
 264:	08 ed       	ldi	r16, 0xD8	; 216
	sts CPU_CCP, r16					;For only 4 clock cycles
 266:	00 93 34 00 	sts	0x0034, r16	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>

	ldi r16, (0x01 << CLK_SCLKSEL_gp)	;Here we are setting the protect clk register to come from the 32MHz oscillator
 26a:	01 e0       	ldi	r16, 0x01	; 1
	sts CLK_CTRL, r16					;
 26c:	00 93 40 00 	sts	0x0040, r16	; 0x800040 <__TEXT_REGION_LENGTH__+0x700040>

00000270 <CLK_Prescalers>:

CLK_Prescalers:
	ldi r16, 0xD8						;Send the signature again
 270:	08 ed       	ldi	r16, 0xD8	; 216
	sts CPU_CCP, r16					;
 272:	00 93 34 00 	sts	0x0034, r16	; 0x800034 <__TEXT_REGION_LENGTH__+0x700034>
	
	ldi r16, ((0x00 << CLK_PSADIV_gp) + (0x00 << CLK_PSBCDIV_gp))	;This doesn't do anything the the prescaller
 276:	00 e0       	ldi	r16, 0x00	; 0
	;ldi r16, ((0x03 << CLK_PSADIV_gp) + (0x00 << CLK_PSBCDIV_gp))				;But this would set our first prescaler (A) to divide by 4
	sts CLK_PSCTRL, r16												;To get us 8MHz
 278:	00 93 41 00 	sts	0x0041, r16	; 0x800041 <__TEXT_REGION_LENGTH__+0x700041>

	pop r16								;Restore r16 register
 27c:	0f 91       	pop	r16

 27e:	08 95       	ret

00000280 <Context_Switch>:
#include <avr/io.h>

.global Context_Switch
Context_Switch:

	mov YL, r24				;Load old Thread pointer into Y
 280:	c8 2f       	mov	r28, r24
	mov YH, r25				;
 282:	d9 2f       	mov	r29, r25

	mov XL, r22				;Load new Thread pointer into X
 284:	a6 2f       	mov	r26, r22
	mov XH, r23				;
 286:	b7 2f       	mov	r27, r23

	in r24, CPU_SPL			;
 288:	8d b7       	in	r24, 0x3d	; 61
	in r25, CPU_SPH			;
 28a:	9e b7       	in	r25, 0x3e	; 62
							;	This removes the next 7 items from the stack
	adiw r24, 0x07			;	More efficient then 7 pop instructions
 28c:	07 96       	adiw	r24, 0x07	; 7
							;
	out CPU_SPL, r24		;
 28e:	8d bf       	out	0x3d, r24	; 61
	out CPU_SPH, r25		;
 290:	9e bf       	out	0x3e, r25	; 62

	;----------------------------------------------------------------------Pre-switch setup!
	;-----------------------------------Save all of the old Thread's registers and data before we can switch context

	pop r24
 292:	8f 91       	pop	r24
	std Y+29, r24
 294:	8d 8f       	std	Y+29, r24	; 0x1d

	pop r24
 296:	8f 91       	pop	r24
	std Y+28, r24
 298:	8c 8f       	std	Y+28, r24	; 0x1c

	pop r24
 29a:	8f 91       	pop	r24
	std Y+31, r24
 29c:	8f 8f       	std	Y+31, r24	; 0x1f

	pop r24
 29e:	8f 91       	pop	r24
	std Y+30, r24
 2a0:	8e 8f       	std	Y+30, r24	; 0x1e

	pop r24
 2a2:	8f 91       	pop	r24
	std Y+27, r24
 2a4:	8b 8f       	std	Y+27, r24	; 0x1b

	pop r24
 2a6:	8f 91       	pop	r24
	std Y+26, r24
 2a8:	8a 8f       	std	Y+26, r24	; 0x1a

	pop r24
 2aa:	8f 91       	pop	r24
	std Y+25, r24
 2ac:	89 8f       	std	Y+25, r24	; 0x19

	pop r24
 2ae:	8f 91       	pop	r24
	std Y+24, r24
 2b0:	88 8f       	std	Y+24, r24	; 0x18

	pop r24
 2b2:	8f 91       	pop	r24
	std Y+23, r24
 2b4:	8f 8b       	std	Y+23, r24	; 0x17

	pop r24
 2b6:	8f 91       	pop	r24
	std Y+22, r24
 2b8:	8e 8b       	std	Y+22, r24	; 0x16

	pop r24
 2ba:	8f 91       	pop	r24
	std Y+21, r24
 2bc:	8d 8b       	std	Y+21, r24	; 0x15

	pop r24
 2be:	8f 91       	pop	r24
	std Y+20, r24
 2c0:	8c 8b       	std	Y+20, r24	; 0x14

	pop r24
 2c2:	8f 91       	pop	r24
	std Y+19, r24
 2c4:	8b 8b       	std	Y+19, r24	; 0x13

	pop r24
 2c6:	8f 91       	pop	r24
	std Y+18, r24
 2c8:	8a 8b       	std	Y+18, r24	; 0x12

	std Y+17, r17
 2ca:	19 8b       	std	Y+17, r17	; 0x11
	std Y+16, r16
 2cc:	08 8b       	std	Y+16, r16	; 0x10
	std Y+15, r15
 2ce:	ff 86       	std	Y+15, r15	; 0x0f
	std Y+14, r14
 2d0:	ee 86       	std	Y+14, r14	; 0x0e
	std Y+13, r13
 2d2:	dd 86       	std	Y+13, r13	; 0x0d
	std Y+12, r12
 2d4:	cc 86       	std	Y+12, r12	; 0x0c
	std Y+11, r11
 2d6:	bb 86       	std	Y+11, r11	; 0x0b
	std Y+10, r10
 2d8:	aa 86       	std	Y+10, r10	; 0x0a
	std Y+9, r09
 2da:	99 86       	std	Y+9, r9	; 0x09
	std Y+8, r08
 2dc:	88 86       	std	Y+8, r8	; 0x08
	std Y+7, r07
 2de:	7f 82       	std	Y+7, r7	; 0x07
	std Y+6, r06
 2e0:	6e 82       	std	Y+6, r6	; 0x06
	std Y+5, r05
 2e2:	5d 82       	std	Y+5, r5	; 0x05
	std Y+4, r04
 2e4:	4c 82       	std	Y+4, r4	; 0x04
	std Y+3, r03
 2e6:	3b 82       	std	Y+3, r3	; 0x03
	std Y+2, r02
 2e8:	2a 82       	std	Y+2, r2	; 0x02

	pop r24				;Save Rampz
 2ea:	8f 91       	pop	r24
	std Y+41, r24
 2ec:	89 a7       	std	Y+41, r24	; 0x29

	pop r24				;Save Rampy
 2ee:	8f 91       	pop	r24
	std Y+40, r24
 2f0:	88 a7       	std	Y+40, r24	; 0x28

	pop	r24				;Save Rampx
 2f2:	8f 91       	pop	r24
	std Y+39, r24
 2f4:	8f a3       	std	Y+39, r24	; 0x27

	pop r24				;Save Rampd
 2f6:	8f 91       	pop	r24
	std Y+38, r24
 2f8:	8e a3       	std	Y+38, r24	; 0x26

	pop r24				;Save status register
 2fa:	8f 91       	pop	r24
	std Y+37, r24
 2fc:	8d a3       	std	Y+37, r24	; 0x25

	pop r24
 2fe:	8f 91       	pop	r24
	st Y, r24
 300:	88 83       	st	Y, r24

	pop r24
 302:	8f 91       	pop	r24
	std Y+1, r24
 304:	89 83       	std	Y+1, r24	; 0x01

	pop r24				;PC High byte
 306:	8f 91       	pop	r24
	std Y+32, r24
 308:	88 a3       	std	Y+32, r24	; 0x20

	pop r24				;PC Middle byte
 30a:	8f 91       	pop	r24
	std Y+33, r24
 30c:	89 a3       	std	Y+33, r24	; 0x21

	pop r24				;PC Low byte
 30e:	8f 91       	pop	r24
	std Y+34, r24
 310:	8a a3       	std	Y+34, r24	; 0x22

	in r24, CPU_SPH		;Stack Pointer High byte
 312:	8e b7       	in	r24, 0x3e	; 62
	std Y+35, r24
 314:	8b a3       	std	Y+35, r24	; 0x23

	in r24, CPU_SPL		;Stack Pointer Low byte
 316:	8d b7       	in	r24, 0x3d	; 61
	std Y+36, r24
 318:	8c a3       	std	Y+36, r24	; 0x24

	mov YL, XL
 31a:	ca 2f       	mov	r28, r26
	mov YH, XH
 31c:	db 2f       	mov	r29, r27

	;--------------------------------------------------Begin Switch!
	;-------------------------Process of restoring all registers and data from next Thread!

	ld r0, Y
 31e:	08 80       	ld	r0, Y
	ldd r1, Y+1
 320:	19 80       	ldd	r1, Y+1	; 0x01
	ldd r2, Y+2
 322:	2a 80       	ldd	r2, Y+2	; 0x02
	ldd r3, Y+3
 324:	3b 80       	ldd	r3, Y+3	; 0x03
	ldd r4, Y+4
 326:	4c 80       	ldd	r4, Y+4	; 0x04
	ldd r5, Y+5
 328:	5d 80       	ldd	r5, Y+5	; 0x05
	ldd r6, Y+6
 32a:	6e 80       	ldd	r6, Y+6	; 0x06
	ldd r7, Y+7
 32c:	7f 80       	ldd	r7, Y+7	; 0x07
	ldd r8, Y+8
 32e:	88 84       	ldd	r8, Y+8	; 0x08
	ldd r9, Y+9
 330:	99 84       	ldd	r9, Y+9	; 0x09
	ldd r10, Y+10
 332:	aa 84       	ldd	r10, Y+10	; 0x0a
	ldd r11, Y+11
 334:	bb 84       	ldd	r11, Y+11	; 0x0b
	ldd r12, Y+12
 336:	cc 84       	ldd	r12, Y+12	; 0x0c
	ldd r13, Y+13
 338:	dd 84       	ldd	r13, Y+13	; 0x0d
	ldd r14, Y+14
 33a:	ee 84       	ldd	r14, Y+14	; 0x0e
	ldd r15, Y+15
 33c:	ff 84       	ldd	r15, Y+15	; 0x0f
	ldd r16, Y+16
 33e:	08 89       	ldd	r16, Y+16	; 0x10
	ldd r17, Y+17
 340:	19 89       	ldd	r17, Y+17	; 0x11
	ldd r18, Y+18
 342:	2a 89       	ldd	r18, Y+18	; 0x12
	ldd r19, Y+19
 344:	3b 89       	ldd	r19, Y+19	; 0x13
	ldd r20, Y+20
 346:	4c 89       	ldd	r20, Y+20	; 0x14
	ldd r21, Y+21
 348:	5d 89       	ldd	r21, Y+21	; 0x15
	ldd r22, Y+22
 34a:	6e 89       	ldd	r22, Y+22	; 0x16
	ldd r23, Y+23
 34c:	7f 89       	ldd	r23, Y+23	; 0x17
	
	ldd r26, Y+26
 34e:	aa 8d       	ldd	r26, Y+26	; 0x1a
	ldd r27, Y+27
 350:	bb 8d       	ldd	r27, Y+27	; 0x1b

	ldd r30, Y+30
 352:	ee 8d       	ldd	r30, Y+30	; 0x1e
	ldd r31, Y+31
 354:	ff 8d       	ldd	r31, Y+31	; 0x1f

	ldd r24, Y+37
 356:	8d a1       	ldd	r24, Y+37	; 0x25
	sts CPU_SREG, r24
 358:	80 93 3f 00 	sts	0x003F, r24	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>

	ldd r24, Y+38
 35c:	8e a1       	ldd	r24, Y+38	; 0x26
	sts CPU_RAMPD, r24
 35e:	80 93 38 00 	sts	0x0038, r24	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>

	ldd r24, Y+39
 362:	8f a1       	ldd	r24, Y+39	; 0x27
	sts CPU_RAMPX, r24
 364:	80 93 39 00 	sts	0x0039, r24	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>

	ldd r24, Y+40
 368:	88 a5       	ldd	r24, Y+40	; 0x28
	sts CPU_RAMPY, r24
 36a:	80 93 3a 00 	sts	0x003A, r24	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>

	ldd r24, Y+41
 36e:	89 a5       	ldd	r24, Y+41	; 0x29
	sts CPU_RAMPZ, r24
 370:	80 93 3b 00 	sts	0x003B, r24	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>

	ldd r24, Y+35
 374:	8b a1       	ldd	r24, Y+35	; 0x23
	out CPU_SPH, r24
 376:	8e bf       	out	0x3e, r24	; 62

	ldd r24, Y+36
 378:	8c a1       	ldd	r24, Y+36	; 0x24
	out CPU_SPL, r24
 37a:	8d bf       	out	0x3d, r24	; 61

	ldd r24, Y+34		;Restore Low byte PC
 37c:	8a a1       	ldd	r24, Y+34	; 0x22
	push r24
 37e:	8f 93       	push	r24

	ldd r24, Y+33		;Restore Middle byte PC
 380:	89 a1       	ldd	r24, Y+33	; 0x21
	push r24
 382:	8f 93       	push	r24

	ldd r24, Y+32		;Restore High byte PC
 384:	88 a1       	ldd	r24, Y+32	; 0x20
	push r24
 386:	8f 93       	push	r24

	ldd r24, Y+28		;Store r28 on stack to not change Y register
 388:	8c 8d       	ldd	r24, Y+28	; 0x1c
	push r24			
 38a:	8f 93       	push	r24

	ldd r24, Y+29		;Store r29 on stack to not change Y register
 38c:	8d 8d       	ldd	r24, Y+29	; 0x1d
	push r24			
 38e:	8f 93       	push	r24

	ldd r24, Y+24		;Restore our scratch Registers last
 390:	88 8d       	ldd	r24, Y+24	; 0x18
	ldd r25, Y+25		;
 392:	99 8d       	ldd	r25, Y+25	; 0x19

	pop r29
 394:	df 91       	pop	r29
	pop r28
 396:	cf 91       	pop	r28

	reti
 398:	18 95       	reti

0000039a <Fork_asm>:
 #include <avr/io.h>

.global Fork_asm
Fork_asm:

	mov YL, r24		;Load the memory location for our new Thread
 39a:	c8 2f       	mov	r28, r24
	mov YH, r25		;
 39c:	d9 2f       	mov	r29, r25
	
	pop r24			;Pop off return address
 39e:	8f 91       	pop	r24
	pop r24			;
 3a0:	8f 91       	pop	r24
	pop r24
 3a2:	8f 91       	pop	r24

	pop r24			;Pop off garbage data
 3a4:	8f 91       	pop	r24
	pop r24			;
 3a6:	8f 91       	pop	r24

	pop r24
 3a8:	8f 91       	pop	r24
	std Y+29, r24
 3aa:	8d 8f       	std	Y+29, r24	; 0x1d

	pop r24
 3ac:	8f 91       	pop	r24
	std Y+28, r24
 3ae:	8c 8f       	std	Y+28, r24	; 0x1c

	pop r24			;5 pops
 3b0:	8f 91       	pop	r24
	std Y+31, r24
 3b2:	8f 8f       	std	Y+31, r24	; 0x1f

	pop r24
 3b4:	8f 91       	pop	r24
	std Y+30, r24
 3b6:	8e 8f       	std	Y+30, r24	; 0x1e

	pop r24
 3b8:	8f 91       	pop	r24
	std Y+27, r24
 3ba:	8b 8f       	std	Y+27, r24	; 0x1b

	pop r24
 3bc:	8f 91       	pop	r24
	std Y+26, r24
 3be:	8a 8f       	std	Y+26, r24	; 0x1a

	pop r24
 3c0:	8f 91       	pop	r24
	std Y+25, r24
 3c2:	89 8f       	std	Y+25, r24	; 0x19

	pop r24			;10 pops
 3c4:	8f 91       	pop	r24
	std Y+24, r24
 3c6:	88 8f       	std	Y+24, r24	; 0x18

	pop r24
 3c8:	8f 91       	pop	r24
	std Y+23, r24
 3ca:	8f 8b       	std	Y+23, r24	; 0x17

	pop r24
 3cc:	8f 91       	pop	r24
	std Y+22, r24
 3ce:	8e 8b       	std	Y+22, r24	; 0x16

	pop r24
 3d0:	8f 91       	pop	r24
	std Y+21, r24
 3d2:	8d 8b       	std	Y+21, r24	; 0x15

	pop r24
 3d4:	8f 91       	pop	r24
	std Y+20, r24
 3d6:	8c 8b       	std	Y+20, r24	; 0x14

	pop r24			;15 pops
 3d8:	8f 91       	pop	r24
	std Y+19, r24
 3da:	8b 8b       	std	Y+19, r24	; 0x13

	pop r24			;16 pops
 3dc:	8f 91       	pop	r24
	std Y+18, r24
 3de:	8a 8b       	std	Y+18, r24	; 0x12

	std Y+17, r17
 3e0:	19 8b       	std	Y+17, r17	; 0x11
	std Y+16, r16
 3e2:	08 8b       	std	Y+16, r16	; 0x10
	std Y+15, r15
 3e4:	ff 86       	std	Y+15, r15	; 0x0f
	std Y+14, r14
 3e6:	ee 86       	std	Y+14, r14	; 0x0e
	std Y+13, r13
 3e8:	dd 86       	std	Y+13, r13	; 0x0d
	std Y+12, r12
 3ea:	cc 86       	std	Y+12, r12	; 0x0c
	std Y+11, r11
 3ec:	bb 86       	std	Y+11, r11	; 0x0b
	std Y+10, r10
 3ee:	aa 86       	std	Y+10, r10	; 0x0a
	std Y+9, r09
 3f0:	99 86       	std	Y+9, r9	; 0x09
	std Y+8, r08
 3f2:	88 86       	std	Y+8, r8	; 0x08
	std Y+7, r07
 3f4:	7f 82       	std	Y+7, r7	; 0x07
	std Y+6, r06
 3f6:	6e 82       	std	Y+6, r6	; 0x06
	std Y+5, r05
 3f8:	5d 82       	std	Y+5, r5	; 0x05
	std Y+4, r04
 3fa:	4c 82       	std	Y+4, r4	; 0x04
	std Y+3, r03
 3fc:	3b 82       	std	Y+3, r3	; 0x03
	std Y+2, r02
 3fe:	2a 82       	std	Y+2, r2	; 0x02

	pop r24				;Save Rampz
 400:	8f 91       	pop	r24
	std Y+41, r24
 402:	89 a7       	std	Y+41, r24	; 0x29

	pop r24				;Save Rampy
 404:	8f 91       	pop	r24
	std Y+40, r24
 406:	88 a7       	std	Y+40, r24	; 0x28

	pop	r24				;Save Rampx
 408:	8f 91       	pop	r24
	std Y+39, r24
 40a:	8f a3       	std	Y+39, r24	; 0x27

	pop r24				;Save Rampd
 40c:	8f 91       	pop	r24
	std Y+38, r24
 40e:	8e a3       	std	Y+38, r24	; 0x26

	pop r24				;Save status register
 410:	8f 91       	pop	r24
	std Y+37, r24
 412:	8d a3       	std	Y+37, r24	; 0x25

	pop r24
 414:	8f 91       	pop	r24
	st Y, r24
 416:	88 83       	st	Y, r24

	pop r24
 418:	8f 91       	pop	r24
	std Y+1, r24
 41a:	89 83       	std	Y+1, r24	; 0x01

	pop r24				;PC High byte
 41c:	8f 91       	pop	r24
	std Y+32, r24
 41e:	88 a3       	std	Y+32, r24	; 0x20

	pop r24				;PC Middle byte
 420:	8f 91       	pop	r24
	std Y+33, r24
 422:	89 a3       	std	Y+33, r24	; 0x21

	pop r24				;PC Low byte
 424:	8f 91       	pop	r24
	std Y+34, r24
 426:	8a a3       	std	Y+34, r24	; 0x22

	in r24, CPU_SPH		;Stack Pointer High byte
 428:	8e b7       	in	r24, 0x3e	; 62
	std Y+35, r24
 42a:	8b a3       	std	Y+35, r24	; 0x23

	in r24, CPU_SPL		;Stack Pointer Low byte
 42c:	8d b7       	in	r24, 0x3d	; 61
	std Y+36, r24
 42e:	8c a3       	std	Y+36, r24	; 0x24

	ldd r24, Y+34		;Restore Low byte PC
 430:	8a a1       	ldd	r24, Y+34	; 0x22
	push r24
 432:	8f 93       	push	r24

	ldd r24, Y+33		;Restore Middle byte PC
 434:	89 a1       	ldd	r24, Y+33	; 0x21
	push r24
 436:	8f 93       	push	r24

	ldd r24, Y+32		;Restore High byte PC
 438:	88 a1       	ldd	r24, Y+32	; 0x20
	push r24
 43a:	8f 93       	push	r24

	reti
 43c:	18 95       	reti

0000043e <Repair_asm>:
 #include <avr/io.h>

.global Repair_asm
Repair_asm:
	
	push XL
 43e:	af 93       	push	r26
	push XH
 440:	bf 93       	push	r27

	mov XL, YL
 442:	ac 2f       	mov	r26, r28
	mov XH, YH
 444:	bd 2f       	mov	r27, r29

	mov YL, r24		;Load the memory location for our new Thread
 446:	c8 2f       	mov	r28, r24
	mov YH, r25		;
 448:	d9 2f       	mov	r29, r25

	pop r03
 44a:	3f 90       	pop	r3
	std Y+26, r03
 44c:	3a 8e       	std	Y+26, r3	; 0x1a

	pop r03
 44e:	3f 90       	pop	r3
	std Y+27, r03
 450:	3b 8e       	std	Y+27, r3	; 0x1b

	pop r00			;Pop off return address
 452:	0f 90       	pop	r0
	pop r01			;
 454:	1f 90       	pop	r1
	pop r02			;
 456:	2f 90       	pop	r2

	pop r24			;R24 Pointer
 458:	8f 91       	pop	r24
	pop r25			;R25
 45a:	9f 91       	pop	r25

	pop r03
 45c:	3f 90       	pop	r3
	std Y+29, r03
 45e:	3d 8e       	std	Y+29, r3	; 0x1d

	pop r03
 460:	3f 90       	pop	r3
	std Y+28, r03
 462:	3c 8e       	std	Y+28, r3	; 0x1c

	pop r03
 464:	3f 90       	pop	r3
	std Y+32, r03
 466:	38 a2       	std	Y+32, r3	; 0x20

	pop r03
 468:	3f 90       	pop	r3
	std Y+33, r03
 46a:	39 a2       	std	Y+33, r3	; 0x21

	pop r03
 46c:	3f 90       	pop	r3
	std Y+34, r03
 46e:	3a a2       	std	Y+34, r3	; 0x22

	in r03, CPU_SPH
 470:	3e b6       	in	r3, 0x3e	; 62
	std Y+35, r03
 472:	3b a2       	std	Y+35, r3	; 0x23

	in r03, CPU_SPL
 474:	3d b6       	in	r3, 0x3d	; 61
	std Y+36, r03
 476:	3c a2       	std	Y+36, r3	; 0x24

	ldd r03, Y+34
 478:	3a a0       	ldd	r3, Y+34	; 0x22
	push r03
 47a:	3f 92       	push	r3

	ldd r03, Y+33
 47c:	39 a0       	ldd	r3, Y+33	; 0x21
	push r03
 47e:	3f 92       	push	r3

	ldd r03, Y+32
 480:	38 a0       	ldd	r3, Y+32	; 0x20
	push r03
 482:	3f 92       	push	r3

	ldd r03, Y+28
 484:	3c 8c       	ldd	r3, Y+28	; 0x1c
	push r03
 486:	3f 92       	push	r3

	ldd r03, Y+29
 488:	3d 8c       	ldd	r3, Y+29	; 0x1d
	push r03
 48a:	3f 92       	push	r3

	push r25
 48c:	9f 93       	push	r25
	push r24
 48e:	8f 93       	push	r24

	push r02
 490:	2f 92       	push	r2
	push r01
 492:	1f 92       	push	r1
	push r00
 494:	0f 92       	push	r0

	mov YL, XL
 496:	ca 2f       	mov	r28, r26
	mov YH, XH
 498:	db 2f       	mov	r29, r27

 49a:	08 95       	ret

0000049c <IO_Init>:

uint8_t sizeAnimation;
uint8_t animation[20];

void IO_Init(void)
{
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	cd b7       	in	r28, 0x3d	; 61
 4a2:	de b7       	in	r29, 0x3e	; 62
	PORTA.DIRCLR = PIN7_bm + PIN6_bm + PIN5_bm + PIN4_bm + PIN3_bm + PIN2_bm + PIN1_bm + PIN0_bm; //dip switches
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	96 e0       	ldi	r25, 0x06	; 6
 4a8:	2f ef       	ldi	r18, 0xFF	; 255
 4aa:	fc 01       	movw	r30, r24
 4ac:	22 83       	std	Z+2, r18	; 0x02
	PORTC.DIRSET = PIN7_bm + PIN6_bm + PIN5_bm + PIN4_bm + PIN3_bm + PIN2_bm + PIN1_bm + PIN0_bm; //leds
 4ae:	80 e4       	ldi	r24, 0x40	; 64
 4b0:	96 e0       	ldi	r25, 0x06	; 6
 4b2:	2f ef       	ldi	r18, 0xFF	; 255
 4b4:	fc 01       	movw	r30, r24
 4b6:	21 83       	std	Z+1, r18	; 0x01
	
	PORTE.DIRCLR = PIN1_bm + PIN0_bm;
 4b8:	80 e8       	ldi	r24, 0x80	; 128
 4ba:	96 e0       	ldi	r25, 0x06	; 6
 4bc:	23 e0       	ldi	r18, 0x03	; 3
 4be:	fc 01       	movw	r30, r24
 4c0:	22 83       	std	Z+2, r18	; 0x02
	PORTF.DIRCLR = PIN3_bm + PIN2_bm;
 4c2:	80 ea       	ldi	r24, 0xA0	; 160
 4c4:	96 e0       	ldi	r25, 0x06	; 6
 4c6:	2c e0       	ldi	r18, 0x0C	; 12
 4c8:	fc 01       	movw	r30, r24
 4ca:	22 83       	std	Z+2, r18	; 0x02
}
 4cc:	00 00       	nop
 4ce:	df 91       	pop	r29
 4d0:	cf 91       	pop	r28
 4d2:	08 95       	ret

000004d4 <TC_Init>:

void TC_Init(void)
{
 4d4:	cf 93       	push	r28
 4d6:	df 93       	push	r29
 4d8:	cd b7       	in	r28, 0x3d	; 61
 4da:	de b7       	in	r29, 0x3e	; 62
	TCC0.CNT = 0x00;
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	98 e0       	ldi	r25, 0x08	; 8
 4e0:	fc 01       	movw	r30, r24
 4e2:	10 a2       	std	Z+32, r1	; 0x20
 4e4:	11 a2       	std	Z+33, r1	; 0x21
	TCC0.PER = 0x01F8;		//Using DIV64
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	98 e0       	ldi	r25, 0x08	; 8
 4ea:	28 ef       	ldi	r18, 0xF8	; 248
 4ec:	31 e0       	ldi	r19, 0x01	; 1
 4ee:	fc 01       	movw	r30, r24
 4f0:	26 a3       	std	Z+38, r18	; 0x26
 4f2:	37 a3       	std	Z+39, r19	; 0x27
	
	TCC1.CNT = 0x00;
 4f4:	80 e4       	ldi	r24, 0x40	; 64
 4f6:	98 e0       	ldi	r25, 0x08	; 8
 4f8:	fc 01       	movw	r30, r24
 4fa:	10 a2       	std	Z+32, r1	; 0x20
 4fc:	11 a2       	std	Z+33, r1	; 0x21
	TCC1.PER = 0x0627;		//Using DIV1024
 4fe:	80 e4       	ldi	r24, 0x40	; 64
 500:	98 e0       	ldi	r25, 0x08	; 8
 502:	27 e2       	ldi	r18, 0x27	; 39
 504:	36 e0       	ldi	r19, 0x06	; 6
 506:	fc 01       	movw	r30, r24
 508:	26 a3       	std	Z+38, r18	; 0x26
 50a:	37 a3       	std	Z+39, r19	; 0x27
}
 50c:	00 00       	nop
 50e:	df 91       	pop	r29
 510:	cf 91       	pop	r28
 512:	08 95       	ret

00000514 <Delay_1ms>:

void Delay_1ms(void)
{
 514:	cf 93       	push	r28
 516:	df 93       	push	r29
 518:	cd b7       	in	r28, 0x3d	; 61
 51a:	de b7       	in	r29, 0x3e	; 62
	TCC0.CTRLA = TC_CLKSEL_DIV64_gc;
 51c:	80 e0       	ldi	r24, 0x00	; 0
 51e:	98 e0       	ldi	r25, 0x08	; 8
 520:	25 e0       	ldi	r18, 0x05	; 5
 522:	fc 01       	movw	r30, r24
 524:	20 83       	st	Z, r18
	
	while(!(TCC0.INTFLAGS & TC0_OVFIF_bm));
 526:	00 00       	nop
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	98 e0       	ldi	r25, 0x08	; 8
 52c:	fc 01       	movw	r30, r24
 52e:	84 85       	ldd	r24, Z+12	; 0x0c
 530:	88 2f       	mov	r24, r24
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	81 70       	andi	r24, 0x01	; 1
 536:	99 27       	eor	r25, r25
 538:	89 2b       	or	r24, r25
 53a:	b1 f3       	breq	.-20     	; 0x528 <Delay_1ms+0x14>
	
	TCC0.CTRLA = TC_CLKSEL_OFF_gc;
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	98 e0       	ldi	r25, 0x08	; 8
 540:	fc 01       	movw	r30, r24
 542:	10 82       	st	Z, r1
	TCC0.INTFLAGS = 0xFF;
 544:	80 e0       	ldi	r24, 0x00	; 0
 546:	98 e0       	ldi	r25, 0x08	; 8
 548:	2f ef       	ldi	r18, 0xFF	; 255
 54a:	fc 01       	movw	r30, r24
 54c:	24 87       	std	Z+12, r18	; 0x0c
}
 54e:	00 00       	nop
 550:	df 91       	pop	r29
 552:	cf 91       	pop	r28
 554:	08 95       	ret

00000556 <Frame_Rate>:

void Frame_Rate(void)
{
 556:	cf 93       	push	r28
 558:	df 93       	push	r29
 55a:	cd b7       	in	r28, 0x3d	; 61
 55c:	de b7       	in	r29, 0x3e	; 62
	TCC1.CTRLA = TC_CLKSEL_DIV1024_gc;
 55e:	80 e4       	ldi	r24, 0x40	; 64
 560:	98 e0       	ldi	r25, 0x08	; 8
 562:	27 e0       	ldi	r18, 0x07	; 7
 564:	fc 01       	movw	r30, r24
 566:	20 83       	st	Z, r18
	
	while(!(TCC1.INTFLAGS & TC1_OVFIF_bm));
 568:	00 00       	nop
 56a:	80 e4       	ldi	r24, 0x40	; 64
 56c:	98 e0       	ldi	r25, 0x08	; 8
 56e:	fc 01       	movw	r30, r24
 570:	84 85       	ldd	r24, Z+12	; 0x0c
 572:	88 2f       	mov	r24, r24
 574:	90 e0       	ldi	r25, 0x00	; 0
 576:	81 70       	andi	r24, 0x01	; 1
 578:	99 27       	eor	r25, r25
 57a:	89 2b       	or	r24, r25
 57c:	b1 f3       	breq	.-20     	; 0x56a <Frame_Rate+0x14>
	
	TCC1.CTRLA = TC_CLKSEL_OFF_gc;
 57e:	80 e4       	ldi	r24, 0x40	; 64
 580:	98 e0       	ldi	r25, 0x08	; 8
 582:	fc 01       	movw	r30, r24
 584:	10 82       	st	Z, r1
	TCC1.INTFLAGS = 0xFF;
 586:	80 e4       	ldi	r24, 0x40	; 64
 588:	98 e0       	ldi	r25, 0x08	; 8
 58a:	2f ef       	ldi	r18, 0xFF	; 255
 58c:	fc 01       	movw	r30, r24
 58e:	24 87       	std	Z+12, r18	; 0x0c
}
 590:	00 00       	nop
 592:	df 91       	pop	r29
 594:	cf 91       	pop	r28
 596:	08 95       	ret

00000598 <Edit_Mode>:

void Edit_Mode(void)
{
 598:	cf 93       	push	r28
 59a:	df 93       	push	r29
 59c:	cd b7       	in	r28, 0x3d	; 61
 59e:	de b7       	in	r29, 0x3e	; 62
	while(1)
	{
		if(!(PORTE.IN & PIN0_bm))
 5a0:	80 e8       	ldi	r24, 0x80	; 128
 5a2:	96 e0       	ldi	r25, 0x06	; 6
 5a4:	fc 01       	movw	r30, r24
 5a6:	80 85       	ldd	r24, Z+8	; 0x08
 5a8:	88 2f       	mov	r24, r24
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	81 70       	andi	r24, 0x01	; 1
 5ae:	99 27       	eor	r25, r25
 5b0:	89 2b       	or	r24, r25
 5b2:	11 f4       	brne	.+4      	; 0x5b8 <Edit_Mode+0x20>
			Play_Mode();
 5b4:	0e 94 1b 03 	call	0x636	; 0x636 <Play_Mode>
		
		PORTC.OUT = PORTA.IN;
 5b8:	80 e4       	ldi	r24, 0x40	; 64
 5ba:	96 e0       	ldi	r25, 0x06	; 6
 5bc:	20 e0       	ldi	r18, 0x00	; 0
 5be:	36 e0       	ldi	r19, 0x06	; 6
 5c0:	f9 01       	movw	r30, r18
 5c2:	20 85       	ldd	r18, Z+8	; 0x08
 5c4:	fc 01       	movw	r30, r24
 5c6:	24 83       	std	Z+4, r18	; 0x04
		
		if((!(PORTF.IN & PIN2_bm)) && (sizeAnimation != 20))
 5c8:	80 ea       	ldi	r24, 0xA0	; 160
 5ca:	96 e0       	ldi	r25, 0x06	; 6
 5cc:	fc 01       	movw	r30, r24
 5ce:	80 85       	ldd	r24, Z+8	; 0x08
 5d0:	88 2f       	mov	r24, r24
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	84 70       	andi	r24, 0x04	; 4
 5d6:	99 27       	eor	r25, r25
 5d8:	89 2b       	or	r24, r25
 5da:	11 f7       	brne	.-60     	; 0x5a0 <Edit_Mode+0x8>
 5dc:	80 91 58 20 	lds	r24, 0x2058	; 0x802058 <sizeAnimation>
 5e0:	84 31       	cpi	r24, 0x14	; 20
 5e2:	f1 f2       	breq	.-68     	; 0x5a0 <Edit_Mode+0x8>
		{
			Delay_1ms();
 5e4:	0e 94 8a 02 	call	0x514	; 0x514 <Delay_1ms>
			if(!(PORTF.IN & PIN2_bm))
 5e8:	80 ea       	ldi	r24, 0xA0	; 160
 5ea:	96 e0       	ldi	r25, 0x06	; 6
 5ec:	fc 01       	movw	r30, r24
 5ee:	80 85       	ldd	r24, Z+8	; 0x08
 5f0:	88 2f       	mov	r24, r24
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	84 70       	andi	r24, 0x04	; 4
 5f6:	99 27       	eor	r25, r25
 5f8:	89 2b       	or	r24, r25
 5fa:	91 f6       	brne	.-92     	; 0x5a0 <Edit_Mode+0x8>
			{
				while(!(PORTF.IN & PIN2_bm));
 5fc:	00 00       	nop
 5fe:	80 ea       	ldi	r24, 0xA0	; 160
 600:	96 e0       	ldi	r25, 0x06	; 6
 602:	fc 01       	movw	r30, r24
 604:	80 85       	ldd	r24, Z+8	; 0x08
 606:	88 2f       	mov	r24, r24
 608:	90 e0       	ldi	r25, 0x00	; 0
 60a:	84 70       	andi	r24, 0x04	; 4
 60c:	99 27       	eor	r25, r25
 60e:	89 2b       	or	r24, r25
 610:	b1 f3       	breq	.-20     	; 0x5fe <Edit_Mode+0x66>
				animation[sizeAnimation] = PORTA.IN;
 612:	80 91 58 20 	lds	r24, 0x2058	; 0x802058 <sizeAnimation>
 616:	88 2f       	mov	r24, r24
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	20 e0       	ldi	r18, 0x00	; 0
 61c:	36 e0       	ldi	r19, 0x06	; 6
 61e:	f9 01       	movw	r30, r18
 620:	20 85       	ldd	r18, Z+8	; 0x08
 622:	87 5a       	subi	r24, 0xA7	; 167
 624:	9f 4d       	sbci	r25, 0xDF	; 223
 626:	fc 01       	movw	r30, r24
 628:	20 83       	st	Z, r18
				sizeAnimation++;
 62a:	80 91 58 20 	lds	r24, 0x2058	; 0x802058 <sizeAnimation>
 62e:	8f 5f       	subi	r24, 0xFF	; 255
 630:	80 93 58 20 	sts	0x2058, r24	; 0x802058 <sizeAnimation>
			}
		}	
	}	
 634:	b5 cf       	rjmp	.-150    	; 0x5a0 <Edit_Mode+0x8>

00000636 <Play_Mode>:
}

void Play_Mode(void)
{
 636:	cf 93       	push	r28
 638:	df 93       	push	r29
 63a:	1f 92       	push	r1
 63c:	cd b7       	in	r28, 0x3d	; 61
 63e:	de b7       	in	r29, 0x3e	; 62
	volatile uint8_t queue = 0;
 640:	19 82       	std	Y+1, r1	; 0x01
	
	while(1)
	{
		if(!(PORTE.IN & PIN1_bm))
 642:	80 e8       	ldi	r24, 0x80	; 128
 644:	96 e0       	ldi	r25, 0x06	; 6
 646:	fc 01       	movw	r30, r24
 648:	80 85       	ldd	r24, Z+8	; 0x08
 64a:	88 2f       	mov	r24, r24
 64c:	90 e0       	ldi	r25, 0x00	; 0
 64e:	82 70       	andi	r24, 0x02	; 2
 650:	99 27       	eor	r25, r25
 652:	89 2b       	or	r24, r25
 654:	11 f4       	brne	.+4      	; 0x65a <Play_Mode+0x24>
			Edit_Mode();
 656:	0e 94 cc 02 	call	0x598	; 0x598 <Edit_Mode>
			
		if(queue == sizeAnimation)
 65a:	99 81       	ldd	r25, Y+1	; 0x01
 65c:	80 91 58 20 	lds	r24, 0x2058	; 0x802058 <sizeAnimation>
 660:	98 17       	cp	r25, r24
 662:	09 f4       	brne	.+2      	; 0x666 <Play_Mode+0x30>
			queue = 0;
 664:	19 82       	std	Y+1, r1	; 0x01
			
		PORTC.OUT = animation[queue];
 666:	80 e4       	ldi	r24, 0x40	; 64
 668:	96 e0       	ldi	r25, 0x06	; 6
 66a:	29 81       	ldd	r18, Y+1	; 0x01
 66c:	22 2f       	mov	r18, r18
 66e:	30 e0       	ldi	r19, 0x00	; 0
 670:	27 5a       	subi	r18, 0xA7	; 167
 672:	3f 4d       	sbci	r19, 0xDF	; 223
 674:	f9 01       	movw	r30, r18
 676:	20 81       	ld	r18, Z
 678:	fc 01       	movw	r30, r24
 67a:	24 83       	std	Z+4, r18	; 0x04
		queue++;
 67c:	89 81       	ldd	r24, Y+1	; 0x01
 67e:	8f 5f       	subi	r24, 0xFF	; 255
 680:	89 83       	std	Y+1, r24	; 0x01
		Frame_Rate();
 682:	0e 94 ab 02 	call	0x556	; 0x556 <Frame_Rate>
	}
 686:	dd cf       	rjmp	.-70     	; 0x642 <Play_Mode+0xc>

00000688 <Main_LED>:
}

void Main_LED(void)
{
 688:	cf 93       	push	r28
 68a:	df 93       	push	r29
 68c:	cd b7       	in	r28, 0x3d	; 61
 68e:	de b7       	in	r29, 0x3e	; 62
	IO_Init();
 690:	0e 94 4e 02 	call	0x49c	; 0x49c <IO_Init>
	TC_Init();
 694:	0e 94 6a 02 	call	0x4d4	; 0x4d4 <TC_Init>
	
	sizeAnimation = 0;
 698:	10 92 58 20 	sts	0x2058, r1	; 0x802058 <sizeAnimation>
	
	Edit_Mode();
 69c:	0e 94 cc 02 	call	0x598	; 0x598 <Edit_Mode>
 6a0:	00 00       	nop
 6a2:	df 91       	pop	r29
 6a4:	cf 91       	pop	r28
 6a6:	08 95       	ret

000006a8 <main>:
	num+=5;
	return num;
}*/

int main(void)
{
 6a8:	cf 93       	push	r28
 6aa:	df 93       	push	r29
 6ac:	cd b7       	in	r28, 0x3d	; 61
 6ae:	de b7       	in	r29, 0x3e	; 62
	System_Init();
 6b0:	0e 94 cd 04 	call	0x99a	; 0x99a <System_Init>
	Init_Thread_Timer();
 6b4:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <Init_Thread_Timer>
	
	//tasks[0]->data[0] = 0x01;
	
	Thread_Table = (uint16_t)tasks;
 6b8:	8d e6       	ldi	r24, 0x6D	; 109
 6ba:	90 e2       	ldi	r25, 0x20	; 32
 6bc:	80 93 c4 20 	sts	0x20C4, r24	; 0x8020c4 <Thread_Table>
 6c0:	90 93 c5 20 	sts	0x20C5, r25	; 0x8020c5 <Thread_Table+0x1>
	queue = 0x00;
 6c4:	10 92 c3 20 	sts	0x20C3, r1	; 0x8020c3 <queue>
	maxQueue = 0x00;
 6c8:	10 92 c6 20 	sts	0x20C6, r1	; 0x8020c6 <maxQueue>
	
	//some_Random_Function(5);
	
	Fork(Main_UI);
 6cc:	8f e2       	ldi	r24, 0x2F	; 47
 6ce:	94 e0       	ldi	r25, 0x04	; 4
 6d0:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Fork>
	
    while (1) 
	{
    }
 6d4:	ff cf       	rjmp	.-2      	; 0x6d4 <main+0x2c>

000006d6 <Usart_Init>:

char line[10];
uint8_t lineCnt = 0;

void Usart_Init(void)
{
 6d6:	cf 93       	push	r28
 6d8:	df 93       	push	r29
 6da:	cd b7       	in	r28, 0x3d	; 61
 6dc:	de b7       	in	r29, 0x3e	; 62
	PORTD.OUTCLR = PIN3_bm;
 6de:	80 e6       	ldi	r24, 0x60	; 96
 6e0:	96 e0       	ldi	r25, 0x06	; 6
 6e2:	28 e0       	ldi	r18, 0x08	; 8
 6e4:	fc 01       	movw	r30, r24
 6e6:	26 83       	std	Z+6, r18	; 0x06
	PORTD.DIRSET = PIN3_bm;
 6e8:	80 e6       	ldi	r24, 0x60	; 96
 6ea:	96 e0       	ldi	r25, 0x06	; 6
 6ec:	28 e0       	ldi	r18, 0x08	; 8
 6ee:	fc 01       	movw	r30, r24
 6f0:	21 83       	std	Z+1, r18	; 0x01
	PORTD.DIRCLR = PIN2_bm;
 6f2:	80 e6       	ldi	r24, 0x60	; 96
 6f4:	96 e0       	ldi	r25, 0x06	; 6
 6f6:	24 e0       	ldi	r18, 0x04	; 4
 6f8:	fc 01       	movw	r30, r24
 6fa:	22 83       	std	Z+2, r18	; 0x02
	
	USARTD0.CTRLA = USART_RXCINTLVL_LO_gc;
 6fc:	80 ea       	ldi	r24, 0xA0	; 160
 6fe:	99 e0       	ldi	r25, 0x09	; 9
 700:	20 e1       	ldi	r18, 0x10	; 16
 702:	fc 01       	movw	r30, r24
 704:	23 83       	std	Z+3, r18	; 0x03
	USARTD0.CTRLB = USART_RXEN_bm + USART_TXEN_bm;
 706:	80 ea       	ldi	r24, 0xA0	; 160
 708:	99 e0       	ldi	r25, 0x09	; 9
 70a:	28 e1       	ldi	r18, 0x18	; 24
 70c:	fc 01       	movw	r30, r24
 70e:	24 83       	std	Z+4, r18	; 0x04
	USARTD0.CTRLC = USART_CMODE_ASYNCHRONOUS_gc + USART_PMODE_EVEN_gc + USART_CHSIZE_8BIT_gc;
 710:	80 ea       	ldi	r24, 0xA0	; 160
 712:	99 e0       	ldi	r25, 0x09	; 9
 714:	23 e2       	ldi	r18, 0x23	; 35
 716:	fc 01       	movw	r30, r24
 718:	25 83       	std	Z+5, r18	; 0x05
	
	USARTD0.BAUDCTRLA = (0xFF & BSEL);
 71a:	80 ea       	ldi	r24, 0xA0	; 160
 71c:	99 e0       	ldi	r25, 0x09	; 9
 71e:	25 e7       	ldi	r18, 0x75	; 117
 720:	fc 01       	movw	r30, r24
 722:	26 83       	std	Z+6, r18	; 0x06
	USARTD0.BAUDCTRLB = (BSCALE << 4) + (BSEL >> 8);
 724:	80 ea       	ldi	r24, 0xA0	; 160
 726:	99 e0       	ldi	r25, 0x09	; 9
 728:	20 ed       	ldi	r18, 0xD0	; 208
 72a:	fc 01       	movw	r30, r24
 72c:	27 83       	std	Z+7, r18	; 0x07
	
}
 72e:	00 00       	nop
 730:	df 91       	pop	r29
 732:	cf 91       	pop	r28
 734:	08 95       	ret

00000736 <Usart_Print>:

void Usart_Print(char str[])
{
 736:	cf 93       	push	r28
 738:	df 93       	push	r29
 73a:	00 d0       	rcall	.+0      	; 0x73c <Usart_Print+0x6>
 73c:	1f 92       	push	r1
 73e:	cd b7       	in	r28, 0x3d	; 61
 740:	de b7       	in	r29, 0x3e	; 62
 742:	8b 83       	std	Y+3, r24	; 0x03
 744:	9c 83       	std	Y+4, r25	; 0x04
	int x = 0;
 746:	19 82       	std	Y+1, r1	; 0x01
 748:	1a 82       	std	Y+2, r1	; 0x02
	while(str[x] != '/')
 74a:	1c c0       	rjmp	.+56     	; 0x784 <Usart_Print+0x4e>
	{
		while(!(USARTD0.STATUS & USART_DREIF_bm));
 74c:	00 00       	nop
 74e:	80 ea       	ldi	r24, 0xA0	; 160
 750:	99 e0       	ldi	r25, 0x09	; 9
 752:	fc 01       	movw	r30, r24
 754:	81 81       	ldd	r24, Z+1	; 0x01
 756:	88 2f       	mov	r24, r24
 758:	90 e0       	ldi	r25, 0x00	; 0
 75a:	80 72       	andi	r24, 0x20	; 32
 75c:	99 27       	eor	r25, r25
 75e:	89 2b       	or	r24, r25
 760:	b1 f3       	breq	.-20     	; 0x74e <Usart_Print+0x18>
		USARTD0.DATA = str[x];
 762:	80 ea       	ldi	r24, 0xA0	; 160
 764:	99 e0       	ldi	r25, 0x09	; 9
 766:	29 81       	ldd	r18, Y+1	; 0x01
 768:	3a 81       	ldd	r19, Y+2	; 0x02
 76a:	4b 81       	ldd	r20, Y+3	; 0x03
 76c:	5c 81       	ldd	r21, Y+4	; 0x04
 76e:	24 0f       	add	r18, r20
 770:	35 1f       	adc	r19, r21
 772:	f9 01       	movw	r30, r18
 774:	20 81       	ld	r18, Z
 776:	fc 01       	movw	r30, r24
 778:	20 83       	st	Z, r18
		x++;
 77a:	89 81       	ldd	r24, Y+1	; 0x01
 77c:	9a 81       	ldd	r25, Y+2	; 0x02
 77e:	01 96       	adiw	r24, 0x01	; 1
 780:	89 83       	std	Y+1, r24	; 0x01
 782:	9a 83       	std	Y+2, r25	; 0x02
}

void Usart_Print(char str[])
{
	int x = 0;
	while(str[x] != '/')
 784:	89 81       	ldd	r24, Y+1	; 0x01
 786:	9a 81       	ldd	r25, Y+2	; 0x02
 788:	2b 81       	ldd	r18, Y+3	; 0x03
 78a:	3c 81       	ldd	r19, Y+4	; 0x04
 78c:	82 0f       	add	r24, r18
 78e:	93 1f       	adc	r25, r19
 790:	fc 01       	movw	r30, r24
 792:	80 81       	ld	r24, Z
 794:	8f 32       	cpi	r24, 0x2F	; 47
 796:	d1 f6       	brne	.-76     	; 0x74c <Usart_Print+0x16>
	{
		while(!(USARTD0.STATUS & USART_DREIF_bm));
		USARTD0.DATA = str[x];
		x++;
	}
}
 798:	00 00       	nop
 79a:	24 96       	adiw	r28, 0x04	; 4
 79c:	cd bf       	out	0x3d, r28	; 61
 79e:	de bf       	out	0x3e, r29	; 62
 7a0:	df 91       	pop	r29
 7a2:	cf 91       	pop	r28
 7a4:	08 95       	ret

000007a6 <LineFeed>:

void LineFeed(void)										//This is just a function equivalent to pressing enter in a document
{
 7a6:	cf 93       	push	r28
 7a8:	df 93       	push	r29
 7aa:	cd b7       	in	r28, 0x3d	; 61
 7ac:	de b7       	in	r29, 0x3e	; 62
	while(!(USARTD0.STATUS & USART_DREIF_bm));
 7ae:	00 00       	nop
 7b0:	80 ea       	ldi	r24, 0xA0	; 160
 7b2:	99 e0       	ldi	r25, 0x09	; 9
 7b4:	fc 01       	movw	r30, r24
 7b6:	81 81       	ldd	r24, Z+1	; 0x01
 7b8:	88 2f       	mov	r24, r24
 7ba:	90 e0       	ldi	r25, 0x00	; 0
 7bc:	80 72       	andi	r24, 0x20	; 32
 7be:	99 27       	eor	r25, r25
 7c0:	89 2b       	or	r24, r25
 7c2:	b1 f3       	breq	.-20     	; 0x7b0 <LineFeed+0xa>
	USARTD0.DATA = 0x0d;
 7c4:	80 ea       	ldi	r24, 0xA0	; 160
 7c6:	99 e0       	ldi	r25, 0x09	; 9
 7c8:	2d e0       	ldi	r18, 0x0D	; 13
 7ca:	fc 01       	movw	r30, r24
 7cc:	20 83       	st	Z, r18
	while(!(USARTD0.STATUS & USART_DREIF_bm));
 7ce:	00 00       	nop
 7d0:	80 ea       	ldi	r24, 0xA0	; 160
 7d2:	99 e0       	ldi	r25, 0x09	; 9
 7d4:	fc 01       	movw	r30, r24
 7d6:	81 81       	ldd	r24, Z+1	; 0x01
 7d8:	88 2f       	mov	r24, r24
 7da:	90 e0       	ldi	r25, 0x00	; 0
 7dc:	80 72       	andi	r24, 0x20	; 32
 7de:	99 27       	eor	r25, r25
 7e0:	89 2b       	or	r24, r25
 7e2:	b1 f3       	breq	.-20     	; 0x7d0 <LineFeed+0x2a>
	USARTD0.DATA = 0x0a;
 7e4:	80 ea       	ldi	r24, 0xA0	; 160
 7e6:	99 e0       	ldi	r25, 0x09	; 9
 7e8:	2a e0       	ldi	r18, 0x0A	; 10
 7ea:	fc 01       	movw	r30, r24
 7ec:	20 83       	st	Z, r18
	
	return;
 7ee:	00 00       	nop
}
 7f0:	df 91       	pop	r29
 7f2:	cf 91       	pop	r28
 7f4:	08 95       	ret

000007f6 <U_In_Prompt>:

void U_In_Prompt(void)
{
 7f6:	cf 93       	push	r28
 7f8:	df 93       	push	r29
 7fa:	cd b7       	in	r28, 0x3d	; 61
 7fc:	de b7       	in	r29, 0x3e	; 62
	LineFeed();
 7fe:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LineFeed>
	Usart_Print(U_In_Prompt_str);
 802:	85 e1       	ldi	r24, 0x15	; 21
 804:	90 e2       	ldi	r25, 0x20	; 32
 806:	0e 94 9b 03 	call	0x736	; 0x736 <Usart_Print>
}
 80a:	00 00       	nop
 80c:	df 91       	pop	r29
 80e:	cf 91       	pop	r28
 810:	08 95       	ret

00000812 <Help_Prompt>:

void Help_Prompt(void)
{
 812:	cf 93       	push	r28
 814:	df 93       	push	r29
 816:	cd b7       	in	r28, 0x3d	; 61
 818:	de b7       	in	r29, 0x3e	; 62
	LineFeed();
 81a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LineFeed>
	LineFeed();
 81e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LineFeed>
	Usart_Print(Help_Prompt_str);
 822:	8c e2       	ldi	r24, 0x2C	; 44
 824:	90 e2       	ldi	r25, 0x20	; 32
 826:	0e 94 9b 03 	call	0x736	; 0x736 <Usart_Print>
	LineFeed();
 82a:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LineFeed>
}
 82e:	00 00       	nop
 830:	df 91       	pop	r29
 832:	cf 91       	pop	r28
 834:	08 95       	ret

00000836 <Init_Prompt>:


void Init_Prompt(void)
{
 836:	cf 93       	push	r28
 838:	df 93       	push	r29
 83a:	cd b7       	in	r28, 0x3d	; 61
 83c:	de b7       	in	r29, 0x3e	; 62
	LineFeed();
 83e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LineFeed>
	LineFeed();
 842:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LineFeed>
	
	Usart_Print(Init_Prompt_str);
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	90 e2       	ldi	r25, 0x20	; 32
 84a:	0e 94 9b 03 	call	0x736	; 0x736 <Usart_Print>
	
	LineFeed();
 84e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LineFeed>
	LineFeed();
 852:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <LineFeed>
}
 856:	00 00       	nop
 858:	df 91       	pop	r29
 85a:	cf 91       	pop	r28
 85c:	08 95       	ret

0000085e <Main_UI>:

void Main_UI(void)
{
 85e:	cf 93       	push	r28
 860:	df 93       	push	r29
 862:	cd b7       	in	r28, 0x3d	; 61
 864:	de b7       	in	r29, 0x3e	; 62
	//Equivalent of main
	
	Usart_Init();
 866:	0e 94 6b 03 	call	0x6d6	; 0x6d6 <Usart_Init>
	
	Init_Prompt();
 86a:	0e 94 1b 04 	call	0x836	; 0x836 <Init_Prompt>
	U_In_Prompt();
 86e:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <U_In_Prompt>

	while(1)
	{
		if(command_Flag)
 872:	80 91 56 20 	lds	r24, 0x2056	; 0x802056 <__data_end>
 876:	88 23       	and	r24, r24
 878:	e1 f3       	breq	.-8      	; 0x872 <Main_UI+0x14>
		{
			
			if(line[0] == 'f' && line[1] == 'o' && line[2] == 'r' && line[3] == 'k')
 87a:	80 91 c9 20 	lds	r24, 0x20C9	; 0x8020c9 <line>
 87e:	86 36       	cpi	r24, 0x66	; 102
 880:	89 f4       	brne	.+34     	; 0x8a4 <Main_UI+0x46>
 882:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <line+0x1>
 886:	8f 36       	cpi	r24, 0x6F	; 111
 888:	69 f4       	brne	.+26     	; 0x8a4 <Main_UI+0x46>
 88a:	80 91 cb 20 	lds	r24, 0x20CB	; 0x8020cb <line+0x2>
 88e:	82 37       	cpi	r24, 0x72	; 114
 890:	49 f4       	brne	.+18     	; 0x8a4 <Main_UI+0x46>
 892:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <line+0x3>
 896:	8b 36       	cpi	r24, 0x6B	; 107
 898:	29 f4       	brne	.+10     	; 0x8a4 <Main_UI+0x46>
			{
				Fork(Main_LED);
 89a:	84 e4       	ldi	r24, 0x44	; 68
 89c:	93 e0       	ldi	r25, 0x03	; 3
 89e:	0e 94 ff 04 	call	0x9fe	; 0x9fe <Fork>
	{
		if(command_Flag)
		{
			
			if(line[0] == 'f' && line[1] == 'o' && line[2] == 'r' && line[3] == 'k')
			{
 8a2:	12 c0       	rjmp	.+36     	; 0x8c8 <Main_UI+0x6a>
				Fork(Main_LED);
			}
			else if(line[0] == 'h' && line[1] == 'e' && line[2] == 'l' && line[3] == 'p')
 8a4:	80 91 c9 20 	lds	r24, 0x20C9	; 0x8020c9 <line>
 8a8:	88 36       	cpi	r24, 0x68	; 104
 8aa:	71 f4       	brne	.+28     	; 0x8c8 <Main_UI+0x6a>
 8ac:	80 91 ca 20 	lds	r24, 0x20CA	; 0x8020ca <line+0x1>
 8b0:	85 36       	cpi	r24, 0x65	; 101
 8b2:	51 f4       	brne	.+20     	; 0x8c8 <Main_UI+0x6a>
 8b4:	80 91 cb 20 	lds	r24, 0x20CB	; 0x8020cb <line+0x2>
 8b8:	8c 36       	cpi	r24, 0x6C	; 108
 8ba:	31 f4       	brne	.+12     	; 0x8c8 <Main_UI+0x6a>
 8bc:	80 91 cc 20 	lds	r24, 0x20CC	; 0x8020cc <line+0x3>
 8c0:	80 37       	cpi	r24, 0x70	; 112
 8c2:	11 f4       	brne	.+4      	; 0x8c8 <Main_UI+0x6a>
			{
				Help_Prompt();
 8c4:	0e 94 09 04 	call	0x812	; 0x812 <Help_Prompt>
			}
			
			U_In_Prompt();
 8c8:	0e 94 fb 03 	call	0x7f6	; 0x7f6 <U_In_Prompt>
			command_Flag = 0;
 8cc:	10 92 56 20 	sts	0x2056, r1	; 0x802056 <__data_end>
		}
	}
 8d0:	d0 cf       	rjmp	.-96     	; 0x872 <Main_UI+0x14>

000008d2 <__vector_88>:
}

ISR(USARTD0_RXC_vect)
{
 8d2:	1f 92       	push	r1
 8d4:	0f 92       	push	r0
 8d6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 8da:	0f 92       	push	r0
 8dc:	11 24       	eor	r1, r1
 8de:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 8e2:	0f 92       	push	r0
 8e4:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 8e8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 8ec:	0f 92       	push	r0
 8ee:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 8f2:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 8f6:	0f 92       	push	r0
 8f8:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 8fc:	2f 93       	push	r18
 8fe:	8f 93       	push	r24
 900:	9f 93       	push	r25
 902:	ef 93       	push	r30
 904:	ff 93       	push	r31
 906:	cf 93       	push	r28
 908:	df 93       	push	r29
 90a:	1f 92       	push	r1
 90c:	cd b7       	in	r28, 0x3d	; 61
 90e:	de b7       	in	r29, 0x3e	; 62
	char received;
	received = USARTD0.DATA;							//Save received value into a variable
 910:	80 ea       	ldi	r24, 0xA0	; 160
 912:	99 e0       	ldi	r25, 0x09	; 9
 914:	fc 01       	movw	r30, r24
 916:	80 81       	ld	r24, Z
 918:	89 83       	std	Y+1, r24	; 0x01
	USARTD0.DATA = received;
 91a:	80 ea       	ldi	r24, 0xA0	; 160
 91c:	99 e0       	ldi	r25, 0x09	; 9
 91e:	29 81       	ldd	r18, Y+1	; 0x01
 920:	fc 01       	movw	r30, r24
 922:	20 83       	st	Z, r18
	
	if(received == 0x0d)
 924:	89 81       	ldd	r24, Y+1	; 0x01
 926:	8d 30       	cpi	r24, 0x0D	; 13
 928:	31 f4       	brne	.+12     	; 0x936 <__vector_88+0x64>
	{
		command_Flag = 1;
 92a:	81 e0       	ldi	r24, 0x01	; 1
 92c:	80 93 56 20 	sts	0x2056, r24	; 0x802056 <__data_end>
		lineCnt = 0;
 930:	10 92 57 20 	sts	0x2057, r1	; 0x802057 <lineCnt>
	}
	else
	{
		line[lineCnt++] = received;
	}
 934:	1a c0       	rjmp	.+52     	; 0x96a <__vector_88+0x98>
	if(received == 0x0d)
	{
		command_Flag = 1;
		lineCnt = 0;
	}
	else if(received == 0x7f && lineCnt != 0)
 936:	89 81       	ldd	r24, Y+1	; 0x01
 938:	8f 37       	cpi	r24, 0x7F	; 127
 93a:	51 f4       	brne	.+20     	; 0x950 <__vector_88+0x7e>
 93c:	80 91 57 20 	lds	r24, 0x2057	; 0x802057 <lineCnt>
 940:	88 23       	and	r24, r24
 942:	31 f0       	breq	.+12     	; 0x950 <__vector_88+0x7e>
	{
		lineCnt--;		
 944:	80 91 57 20 	lds	r24, 0x2057	; 0x802057 <lineCnt>
 948:	81 50       	subi	r24, 0x01	; 1
 94a:	80 93 57 20 	sts	0x2057, r24	; 0x802057 <lineCnt>
	}
	else
	{
		line[lineCnt++] = received;
	}
 94e:	0d c0       	rjmp	.+26     	; 0x96a <__vector_88+0x98>
	{
		lineCnt--;		
	}
	else
	{
		line[lineCnt++] = received;
 950:	80 91 57 20 	lds	r24, 0x2057	; 0x802057 <lineCnt>
 954:	91 e0       	ldi	r25, 0x01	; 1
 956:	98 0f       	add	r25, r24
 958:	90 93 57 20 	sts	0x2057, r25	; 0x802057 <lineCnt>
 95c:	88 2f       	mov	r24, r24
 95e:	90 e0       	ldi	r25, 0x00	; 0
 960:	87 53       	subi	r24, 0x37	; 55
 962:	9f 4d       	sbci	r25, 0xDF	; 223
 964:	29 81       	ldd	r18, Y+1	; 0x01
 966:	fc 01       	movw	r30, r24
 968:	20 83       	st	Z, r18
	}
 96a:	00 00       	nop
 96c:	0f 90       	pop	r0
 96e:	df 91       	pop	r29
 970:	cf 91       	pop	r28
 972:	ff 91       	pop	r31
 974:	ef 91       	pop	r30
 976:	9f 91       	pop	r25
 978:	8f 91       	pop	r24
 97a:	2f 91       	pop	r18
 97c:	0f 90       	pop	r0
 97e:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 982:	0f 90       	pop	r0
 984:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 988:	0f 90       	pop	r0
 98a:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 98e:	0f 90       	pop	r0
 990:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 994:	0f 90       	pop	r0
 996:	1f 90       	pop	r1
 998:	18 95       	reti

0000099a <System_Init>:
 */ 

#include "thread.h"

void System_Init(void)
{
 99a:	cf 93       	push	r28
 99c:	df 93       	push	r29
 99e:	cd b7       	in	r28, 0x3d	; 61
 9a0:	de b7       	in	r29, 0x3e	; 62
	Clock_init();
 9a2:	0e 94 2a 01 	call	0x254	; 0x254 <Clock_init>
	
	PMIC.CTRL |= PMIC_LOLVLEN_bm;
 9a6:	80 ea       	ldi	r24, 0xA0	; 160
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	20 ea       	ldi	r18, 0xA0	; 160
 9ac:	30 e0       	ldi	r19, 0x00	; 0
 9ae:	f9 01       	movw	r30, r18
 9b0:	22 81       	ldd	r18, Z+2	; 0x02
 9b2:	21 60       	ori	r18, 0x01	; 1
 9b4:	fc 01       	movw	r30, r24
 9b6:	22 83       	std	Z+2, r18	; 0x02
	sei();
 9b8:	78 94       	sei
}
 9ba:	00 00       	nop
 9bc:	df 91       	pop	r29
 9be:	cf 91       	pop	r28
 9c0:	08 95       	ret

000009c2 <Init_Thread_Timer>:

void Init_Thread_Timer(void)
{
 9c2:	cf 93       	push	r28
 9c4:	df 93       	push	r29
 9c6:	cd b7       	in	r28, 0x3d	; 61
 9c8:	de b7       	in	r29, 0x3e	; 62
	TCF0.CNT = 0x0000;
 9ca:	80 e0       	ldi	r24, 0x00	; 0
 9cc:	9b e0       	ldi	r25, 0x0B	; 11
 9ce:	fc 01       	movw	r30, r24
 9d0:	10 a2       	std	Z+32, r1	; 0x20
 9d2:	11 a2       	std	Z+33, r1	; 0x21
	TCF0.PER = 0x0143;
 9d4:	80 e0       	ldi	r24, 0x00	; 0
 9d6:	9b e0       	ldi	r25, 0x0B	; 11
 9d8:	23 e4       	ldi	r18, 0x43	; 67
 9da:	31 e0       	ldi	r19, 0x01	; 1
 9dc:	fc 01       	movw	r30, r24
 9de:	26 a3       	std	Z+38, r18	; 0x26
 9e0:	37 a3       	std	Z+39, r19	; 0x27
	
	TCF0.INTCTRLA = TC_OVFINTLVL_LO_gc;
 9e2:	80 e0       	ldi	r24, 0x00	; 0
 9e4:	9b e0       	ldi	r25, 0x0B	; 11
 9e6:	21 e0       	ldi	r18, 0x01	; 1
 9e8:	fc 01       	movw	r30, r24
 9ea:	26 83       	std	Z+6, r18	; 0x06
	TCF0.CTRLA = TC_CLKSEL_DIV1_gc;
 9ec:	80 e0       	ldi	r24, 0x00	; 0
 9ee:	9b e0       	ldi	r25, 0x0B	; 11
 9f0:	21 e0       	ldi	r18, 0x01	; 1
 9f2:	fc 01       	movw	r30, r24
 9f4:	20 83       	st	Z, r18
}
 9f6:	00 00       	nop
 9f8:	df 91       	pop	r29
 9fa:	cf 91       	pop	r28
 9fc:	08 95       	ret

000009fe <Fork>:

void Fork(void (*process)(void))
{
 9fe:	cf 93       	push	r28
 a00:	df 93       	push	r29
 a02:	1f 92       	push	r1
 a04:	1f 92       	push	r1
 a06:	cd b7       	in	r28, 0x3d	; 61
 a08:	de b7       	in	r29, 0x3e	; 62
 a0a:	89 83       	std	Y+1, r24	; 0x01
 a0c:	9a 83       	std	Y+2, r25	; 0x02
	if(maxQueue != 0)
 a0e:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <maxQueue>
 a12:	88 23       	and	r24, r24
 a14:	59 f0       	breq	.+22     	; 0xa2c <Fork+0x2e>
	{
		Repair_asm(Thread_Table);
 a16:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <Thread_Table>
 a1a:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <Thread_Table+0x1>
 a1e:	0e 94 1f 02 	call	0x43e	; 0x43e <Repair_asm>
		queue++;
 a22:	80 91 c3 20 	lds	r24, 0x20C3	; 0x8020c3 <queue>
 a26:	8f 5f       	subi	r24, 0xFF	; 255
 a28:	80 93 c3 20 	sts	0x20C3, r24	; 0x8020c3 <queue>
	}
	
	TCF0.CTRLA = TC_CLKSEL_OFF_gc;
 a2c:	80 e0       	ldi	r24, 0x00	; 0
 a2e:	9b e0       	ldi	r25, 0x0B	; 11
 a30:	fc 01       	movw	r30, r24
 a32:	10 82       	st	Z, r1
	
	TCF0.CNT = 0x0000;
 a34:	80 e0       	ldi	r24, 0x00	; 0
 a36:	9b e0       	ldi	r25, 0x0B	; 11
 a38:	fc 01       	movw	r30, r24
 a3a:	10 a2       	std	Z+32, r1	; 0x20
 a3c:	11 a2       	std	Z+33, r1	; 0x21
	TCF1.CNT = 0x0000;
 a3e:	80 e4       	ldi	r24, 0x40	; 64
 a40:	9b e0       	ldi	r25, 0x0B	; 11
 a42:	fc 01       	movw	r30, r24
 a44:	10 a2       	std	Z+32, r1	; 0x20
 a46:	11 a2       	std	Z+33, r1	; 0x21
	TCF1.PER = 0x0050;
 a48:	80 e4       	ldi	r24, 0x40	; 64
 a4a:	9b e0       	ldi	r25, 0x0B	; 11
 a4c:	20 e5       	ldi	r18, 0x50	; 80
 a4e:	30 e0       	ldi	r19, 0x00	; 0
 a50:	fc 01       	movw	r30, r24
 a52:	26 a3       	std	Z+38, r18	; 0x26
 a54:	37 a3       	std	Z+39, r19	; 0x27
	
	TCF1.INTCTRLA = TC_OVFINTLVL_LO_gc;
 a56:	80 e4       	ldi	r24, 0x40	; 64
 a58:	9b e0       	ldi	r25, 0x0B	; 11
 a5a:	21 e0       	ldi	r18, 0x01	; 1
 a5c:	fc 01       	movw	r30, r24
 a5e:	26 83       	std	Z+6, r18	; 0x06
	
	maxQueue++;
 a60:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <maxQueue>
 a64:	8f 5f       	subi	r24, 0xFF	; 255
 a66:	80 93 c6 20 	sts	0x20C6, r24	; 0x8020c6 <maxQueue>
	stackPointer = 0x3FFF - (0x200 * maxQueue);
 a6a:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <maxQueue>
 a6e:	88 2f       	mov	r24, r24
 a70:	90 e0       	ldi	r25, 0x00	; 0
 a72:	98 2f       	mov	r25, r24
 a74:	88 27       	eor	r24, r24
 a76:	99 0f       	add	r25, r25
 a78:	2f ef       	ldi	r18, 0xFF	; 255
 a7a:	3f e3       	ldi	r19, 0x3F	; 63
 a7c:	a9 01       	movw	r20, r18
 a7e:	48 1b       	sub	r20, r24
 a80:	59 0b       	sbc	r21, r25
 a82:	ca 01       	movw	r24, r20
 a84:	80 93 c7 20 	sts	0x20C7, r24	; 0x8020c7 <stackPointer>
 a88:	90 93 c8 20 	sts	0x20C8, r25	; 0x8020c8 <stackPointer+0x1>

	CPU_SPL = (0xFF & stackPointer);
 a8c:	8d e3       	ldi	r24, 0x3D	; 61
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	20 91 c7 20 	lds	r18, 0x20C7	; 0x8020c7 <stackPointer>
 a94:	30 91 c8 20 	lds	r19, 0x20C8	; 0x8020c8 <stackPointer+0x1>
 a98:	fc 01       	movw	r30, r24
 a9a:	20 83       	st	Z, r18
	CPU_SPH = (stackPointer >> 8);
 a9c:	8e e3       	ldi	r24, 0x3E	; 62
 a9e:	90 e0       	ldi	r25, 0x00	; 0
 aa0:	20 91 c7 20 	lds	r18, 0x20C7	; 0x8020c7 <stackPointer>
 aa4:	30 91 c8 20 	lds	r19, 0x20C8	; 0x8020c8 <stackPointer+0x1>
 aa8:	23 2f       	mov	r18, r19
 aaa:	33 27       	eor	r19, r19
 aac:	fc 01       	movw	r30, r24
 aae:	20 83       	st	Z, r18
	
	TCF0.CTRLA = TC_CLKSEL_DIV1_gc;
 ab0:	80 e0       	ldi	r24, 0x00	; 0
 ab2:	9b e0       	ldi	r25, 0x0B	; 11
 ab4:	21 e0       	ldi	r18, 0x01	; 1
 ab6:	fc 01       	movw	r30, r24
 ab8:	20 83       	st	Z, r18
	TCF1.CTRLA = TC_CLKSEL_DIV1_gc;
 aba:	80 e4       	ldi	r24, 0x40	; 64
 abc:	9b e0       	ldi	r25, 0x0B	; 11
 abe:	21 e0       	ldi	r18, 0x01	; 1
 ac0:	fc 01       	movw	r30, r24
 ac2:	20 83       	st	Z, r18

	process();
 ac4:	89 81       	ldd	r24, Y+1	; 0x01
 ac6:	9a 81       	ldd	r25, Y+2	; 0x02
 ac8:	fc 01       	movw	r30, r24
 aca:	19 95       	eicall
}
 acc:	00 00       	nop
 ace:	0f 90       	pop	r0
 ad0:	0f 90       	pop	r0
 ad2:	df 91       	pop	r29
 ad4:	cf 91       	pop	r28
 ad6:	08 95       	ret

00000ad8 <__vector_108>:

ISR(TCF0_OVF_vect)
{
 ad8:	1f 92       	push	r1
 ada:	0f 92       	push	r0
 adc:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 ae0:	0f 92       	push	r0
 ae2:	11 24       	eor	r1, r1
 ae4:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 ae8:	0f 92       	push	r0
 aea:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 aee:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 af2:	0f 92       	push	r0
 af4:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 af8:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 afc:	0f 92       	push	r0
 afe:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 b02:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 b06:	0f 92       	push	r0
 b08:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 b0c:	2f 93       	push	r18
 b0e:	3f 93       	push	r19
 b10:	4f 93       	push	r20
 b12:	5f 93       	push	r21
 b14:	6f 93       	push	r22
 b16:	7f 93       	push	r23
 b18:	8f 93       	push	r24
 b1a:	9f 93       	push	r25
 b1c:	af 93       	push	r26
 b1e:	bf 93       	push	r27
 b20:	ef 93       	push	r30
 b22:	ff 93       	push	r31
 b24:	cf 93       	push	r28
 b26:	df 93       	push	r29
 b28:	00 d0       	rcall	.+0      	; 0xb2a <__vector_108+0x52>
 b2a:	1f 92       	push	r1
 b2c:	cd b7       	in	r28, 0x3d	; 61
 b2e:	de b7       	in	r29, 0x3e	; 62
	if(maxQueue != 1)
 b30:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <maxQueue>
 b34:	81 30       	cpi	r24, 0x01	; 1
 b36:	79 f1       	breq	.+94     	; 0xb96 <__vector_108+0xbe>
	{
		Thread *oldTh, *newTh;
		oldTh = &tasks[queue++];
 b38:	80 91 c3 20 	lds	r24, 0x20C3	; 0x8020c3 <queue>
 b3c:	91 e0       	ldi	r25, 0x01	; 1
 b3e:	98 0f       	add	r25, r24
 b40:	90 93 c3 20 	sts	0x20C3, r25	; 0x8020c3 <queue>
 b44:	28 2f       	mov	r18, r24
 b46:	30 e0       	ldi	r19, 0x00	; 0
 b48:	4b e2       	ldi	r20, 0x2B	; 43
 b4a:	42 9f       	mul	r20, r18
 b4c:	c0 01       	movw	r24, r0
 b4e:	43 9f       	mul	r20, r19
 b50:	90 0d       	add	r25, r0
 b52:	11 24       	eor	r1, r1
 b54:	83 59       	subi	r24, 0x93	; 147
 b56:	9f 4d       	sbci	r25, 0xDF	; 223
 b58:	89 83       	std	Y+1, r24	; 0x01
 b5a:	9a 83       	std	Y+2, r25	; 0x02
		
		if(queue == maxQueue)
 b5c:	90 91 c3 20 	lds	r25, 0x20C3	; 0x8020c3 <queue>
 b60:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <maxQueue>
 b64:	98 17       	cp	r25, r24
 b66:	11 f4       	brne	.+4      	; 0xb6c <__vector_108+0x94>
			queue = 0;
 b68:	10 92 c3 20 	sts	0x20C3, r1	; 0x8020c3 <queue>
		
		newTh = &tasks[queue];
 b6c:	80 91 c3 20 	lds	r24, 0x20C3	; 0x8020c3 <queue>
 b70:	28 2f       	mov	r18, r24
 b72:	30 e0       	ldi	r19, 0x00	; 0
 b74:	4b e2       	ldi	r20, 0x2B	; 43
 b76:	42 9f       	mul	r20, r18
 b78:	c0 01       	movw	r24, r0
 b7a:	43 9f       	mul	r20, r19
 b7c:	90 0d       	add	r25, r0
 b7e:	11 24       	eor	r1, r1
 b80:	83 59       	subi	r24, 0x93	; 147
 b82:	9f 4d       	sbci	r25, 0xDF	; 223
 b84:	8b 83       	std	Y+3, r24	; 0x03
 b86:	9c 83       	std	Y+4, r25	; 0x04
		
		Context_Switch(oldTh, newTh);
 b88:	2b 81       	ldd	r18, Y+3	; 0x03
 b8a:	3c 81       	ldd	r19, Y+4	; 0x04
 b8c:	89 81       	ldd	r24, Y+1	; 0x01
 b8e:	9a 81       	ldd	r25, Y+2	; 0x02
 b90:	b9 01       	movw	r22, r18
 b92:	0e 94 40 01 	call	0x280	; 0x280 <Context_Switch>
	}
}
 b96:	00 00       	nop
 b98:	24 96       	adiw	r28, 0x04	; 4
 b9a:	cd bf       	out	0x3d, r28	; 61
 b9c:	de bf       	out	0x3e, r29	; 62
 b9e:	df 91       	pop	r29
 ba0:	cf 91       	pop	r28
 ba2:	ff 91       	pop	r31
 ba4:	ef 91       	pop	r30
 ba6:	bf 91       	pop	r27
 ba8:	af 91       	pop	r26
 baa:	9f 91       	pop	r25
 bac:	8f 91       	pop	r24
 bae:	7f 91       	pop	r23
 bb0:	6f 91       	pop	r22
 bb2:	5f 91       	pop	r21
 bb4:	4f 91       	pop	r20
 bb6:	3f 91       	pop	r19
 bb8:	2f 91       	pop	r18
 bba:	0f 90       	pop	r0
 bbc:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 bc0:	0f 90       	pop	r0
 bc2:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 bc6:	0f 90       	pop	r0
 bc8:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 bcc:	0f 90       	pop	r0
 bce:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 bd2:	0f 90       	pop	r0
 bd4:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 bd8:	0f 90       	pop	r0
 bda:	1f 90       	pop	r1
 bdc:	18 95       	reti

00000bde <__vector_114>:


ISR(TCF1_OVF_vect)
{
 bde:	1f 92       	push	r1
 be0:	0f 92       	push	r0
 be2:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 be6:	0f 92       	push	r0
 be8:	11 24       	eor	r1, r1
 bea:	00 90 38 00 	lds	r0, 0x0038	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 bee:	0f 92       	push	r0
 bf0:	10 92 38 00 	sts	0x0038, r1	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 bf4:	00 90 39 00 	lds	r0, 0x0039	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 bf8:	0f 92       	push	r0
 bfa:	10 92 39 00 	sts	0x0039, r1	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 bfe:	00 90 3a 00 	lds	r0, 0x003A	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 c02:	0f 92       	push	r0
 c04:	10 92 3a 00 	sts	0x003A, r1	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 c08:	00 90 3b 00 	lds	r0, 0x003B	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 c0c:	0f 92       	push	r0
 c0e:	10 92 3b 00 	sts	0x003B, r1	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 c12:	2f 93       	push	r18
 c14:	3f 93       	push	r19
 c16:	4f 93       	push	r20
 c18:	5f 93       	push	r21
 c1a:	6f 93       	push	r22
 c1c:	7f 93       	push	r23
 c1e:	8f 93       	push	r24
 c20:	9f 93       	push	r25
 c22:	af 93       	push	r26
 c24:	bf 93       	push	r27
 c26:	ef 93       	push	r30
 c28:	ff 93       	push	r31
 c2a:	cf 93       	push	r28
 c2c:	df 93       	push	r29
 c2e:	1f 92       	push	r1
 c30:	1f 92       	push	r1
 c32:	cd b7       	in	r28, 0x3d	; 61
 c34:	de b7       	in	r29, 0x3e	; 62
	TCF1.CTRLA = TC_CLKSEL_OFF_gc;
 c36:	80 e4       	ldi	r24, 0x40	; 64
 c38:	9b e0       	ldi	r25, 0x0B	; 11
 c3a:	fc 01       	movw	r30, r24
 c3c:	10 82       	st	Z, r1
	
	uint16_t location = Thread_Table + ((maxQueue-1)*thread_Size);
 c3e:	80 91 c6 20 	lds	r24, 0x20C6	; 0x8020c6 <maxQueue>
 c42:	88 2f       	mov	r24, r24
 c44:	90 e0       	ldi	r25, 0x00	; 0
 c46:	01 97       	sbiw	r24, 0x01	; 1
 c48:	4b e2       	ldi	r20, 0x2B	; 43
 c4a:	48 9f       	mul	r20, r24
 c4c:	90 01       	movw	r18, r0
 c4e:	49 9f       	mul	r20, r25
 c50:	30 0d       	add	r19, r0
 c52:	11 24       	eor	r1, r1
 c54:	80 91 c4 20 	lds	r24, 0x20C4	; 0x8020c4 <Thread_Table>
 c58:	90 91 c5 20 	lds	r25, 0x20C5	; 0x8020c5 <Thread_Table+0x1>
 c5c:	82 0f       	add	r24, r18
 c5e:	93 1f       	adc	r25, r19
 c60:	89 83       	std	Y+1, r24	; 0x01
 c62:	9a 83       	std	Y+2, r25	; 0x02
	
	Fork_asm(location);
 c64:	89 81       	ldd	r24, Y+1	; 0x01
 c66:	9a 81       	ldd	r25, Y+2	; 0x02
 c68:	0e 94 cd 01 	call	0x39a	; 0x39a <Fork_asm>
 c6c:	00 00       	nop
 c6e:	0f 90       	pop	r0
 c70:	0f 90       	pop	r0
 c72:	df 91       	pop	r29
 c74:	cf 91       	pop	r28
 c76:	ff 91       	pop	r31
 c78:	ef 91       	pop	r30
 c7a:	bf 91       	pop	r27
 c7c:	af 91       	pop	r26
 c7e:	9f 91       	pop	r25
 c80:	8f 91       	pop	r24
 c82:	7f 91       	pop	r23
 c84:	6f 91       	pop	r22
 c86:	5f 91       	pop	r21
 c88:	4f 91       	pop	r20
 c8a:	3f 91       	pop	r19
 c8c:	2f 91       	pop	r18
 c8e:	0f 90       	pop	r0
 c90:	00 92 3b 00 	sts	0x003B, r0	; 0x80003b <__TEXT_REGION_LENGTH__+0x70003b>
 c94:	0f 90       	pop	r0
 c96:	00 92 3a 00 	sts	0x003A, r0	; 0x80003a <__TEXT_REGION_LENGTH__+0x70003a>
 c9a:	0f 90       	pop	r0
 c9c:	00 92 39 00 	sts	0x0039, r0	; 0x800039 <__TEXT_REGION_LENGTH__+0x700039>
 ca0:	0f 90       	pop	r0
 ca2:	00 92 38 00 	sts	0x0038, r0	; 0x800038 <__TEXT_REGION_LENGTH__+0x700038>
 ca6:	0f 90       	pop	r0
 ca8:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <__TEXT_REGION_LENGTH__+0x70003f>
 cac:	0f 90       	pop	r0
 cae:	1f 90       	pop	r1
 cb0:	18 95       	reti

00000cb2 <_exit>:
 cb2:	f8 94       	cli

00000cb4 <__stop_program>:
 cb4:	ff cf       	rjmp	.-2      	; 0xcb4 <__stop_program>
